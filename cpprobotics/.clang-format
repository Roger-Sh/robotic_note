# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language: Cpp

BasedOnStyle: Google

# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4

# 左括号(左圆括号、左尖括号、左方括号)后的对齐:
# Align, DontAlign, AlwaysBreak(总是在左括号后换行)
AlignAfterOpenBracket: AlwaysBreak

# 多维数组中数据的对齐方式
AlignArrayOfStructures: Left

# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments: false

# 对齐连续位域字段的风格
#AlignConsecutiveBitFields:AcrossEmptyLinesAndComments

# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: false

# 对齐连续宏定义的风格
# AlignConsecutiveMacros: true

# 用于在使用反斜杠换行中对齐反斜杠的选项
# AlignEscapedNewlines: Left

# 水平对齐二元和三元表达式的操作数
AlignOperands: true

# 对齐连续的尾随的注释
AlignTrailingComments: true

# 如果函数调用或带括号的初始化列表不适合全部在一行时
# 允许将所有参数放到下一行，即使BinPackArguments为false
AllowAllArgumentsOnNextLine: false

# 允许构造函数的初始化参数放在下一行
# AllowAllConstructorInitializersOnNextLine: true

# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: false

# 允许短的块放在同一行(Always 总是将短块合并成一行，Empty 只合并空块)
AllowShortBlocksOnASingleLine: Empty

# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false

# 允许短的enums数据放在同一行
AllowShortEnumsOnASingleLine: false

# 允许短的函数放在同一行:
# None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: Empty

# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: Never

# 允许短的lambdas语句保持在同一行
AllowShortLambdasOnASingleLine: Empty

# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false

# 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None

# 函数声明返回类型后是否换行(None 自动，All全部，TopLevel...)
AlwaysBreakAfterReturnType: None

# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: false

# 总是在template声明后换行
# AlwaysBreakTemplateDeclarations: No

# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: false

# false表示函数实参要么都在同一行，要么都各自一行
BinPackParameters: false

# The BitFieldColonSpacingStyle to use for bitfields.
# BitFieldColonSpacing: Both

# 大括号换行，只有当 BreakBeforeBraces 设置为Custom时才有效
BraceWrapping:
  # case 语句后面
  # AfterCaseLabel: true
  # class定义后面
  AfterClass: true
  # 控制语句后面
  AfterControlStatement: true
  # enum定义后面
  AfterEnum: true
  # 函数定义后面
  AfterFunction: true
  # 命名空间定义后面
  AfterNamespace: true
  # ObjC定义后面
  AfterObjCDeclaration: true
  # struct定义后面
  AfterStruct: true
  # union定义后面
  AfterUnion: true
  # extern 导出块后面
  AfterExternBlock: true
  # catch之前
  BeforeCatch: true
  # else之前
  BeforeElse: true
  #BeforeLambdaBody: true
  #BeforeWhile: true
  # 缩进大括号(整个大括号框起来的部分都缩进)
  IndentBraces: false
  # 空函数的大括号是否可以在一行
  SplitEmptyFunction: true
  # 空记录体(struct/class/union)的大括号是否可以在一行
  SplitEmptyRecord: true
  # 空名字空间的大括号是否可以在一行
  SplitEmptyNamespace: true

# 在二元运算符前换行:
# None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None

# 大括号的换行规则
BreakBeforeBraces: Allman

#BreakBeforeConceptDeclarations: true

# 三元运算操作符换行位置（?和: 在新行还是尾部）
BreakBeforeTernaryOperators: true

# 要使用的构造函数初始化式样式
BreakConstructorInitializers: AfterColon

# BreakInheritanceList: BeforeComma
# BreakStringLiterals: true

# 每行字符的限制，0表示没有限制
ColumnLimit: 120

# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
# CommentPragmas: ''

# 如果为true，则连续的名称空间声明将在同一行上。
# 如果为false，则在新行上声明每个名称空间。
CompactNamespaces: false

# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4

# 延续的行的缩进宽度
ContinuationIndentWidth: 4

# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true

# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false

# 关闭格式化
DisableFormat: false

# 空格检查
#EmptyLineAfterAccessModifier: Leave
#EmptyLineBeforeAccessModifier:  Leave

# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false

# 如果为true，则clang格式会为短名称空间添加缺少的名称空间结尾注释，
# 并修复无效的现有名称结束注释
FixNamespaceComments: true

# 缩进private、public等标签
# IndentAccessModifiers: true

# 缩进case
# IndentCaseBlocks: false

# 缩进case标签
IndentCaseLabels: true

#IndentExternBlock: AfterExternBlock

# 要使用的预处理器指令缩进样式
# IndentPPDirectives: AfterHash

# 缩进宽度
IndentWidth: 4

# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false

# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: true

# 开始一个块的宏的正则表达式
# MacroBlockBegin: ''

# 结束一个块的宏的正则表达式
# MacroBlockEnd: ''

# 连续空行的最大数量
MaxEmptyLinesToKeep: 1

# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: All

# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 4

# 在ObjC的@property后添加一个空格
ObjCSpaceAfterProperty: false

# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true

# 构造函数(Constructor)初始化列表的"堆积占行(Bin-Pack)"方式。
PackConstructorInitializers: CurrentLine

# 在call(后对函数调用换行的penalty
PenaltyBreakBeforeFirstCallParameter: 2

# 在一个注释中引入换行的penalty
PenaltyBreakComment: 300

# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120

# 在一个字符串字面量中引入换行的penalty
PenaltyBreakString: 1000

# 对于每个在行字符数限制之外的字符的penalty
PenaltyExcessCharacter: 1000000

# 对每一个空格缩进字符的penalty(相对于前导的非空格列计算)
# PenaltyIndentedWhitespace: 0

# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine: 1000000

# 指针和引用的对齐: Left, Right, Middle
PointerAlignment: Left

# 允许重新排版注释
ReflowComments: true

# 允许排序#include
SortIncludes: true

# 允许排序 using 声明顺序
SortUsingDeclarations: false

# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false

# 在逻辑非操作符(!)之后插入一个空格
# SpaceAfterLogicalNot: false

# 在 template 关键字后插入一个空格
SpaceAfterTemplateKeyword: false

# 定义在什么情况下在指针限定符之前或之后放置空格
# SpaceAroundPointerQualifiers: Before

# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true

# 左圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements

# 空格将在基于范围的for循环冒号之前被删除
# SpaceBeforeRangeBasedForLoopColon: true

# [ 前是否添加空格（数组名和[之间，Lambdas不会受到影响）
# 连续多个 [ 只考虑第一个（嵌套数组，多维数组）
# SpaceBeforeSquareBrackets: false

# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false

# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 3

# 在尖括号的<后和>前添加空格
SpacesInAngles: false

# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: false

# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false

# 如果为true，将在If/for/switch/while条件括号前后插入空格。
# SpacesInConditionalStatement: true

# 在圆括号的(后和)前添加空格
SpacesInParentheses: false

# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false

# 标准: Cpp03, Cpp11, Auto
Standard: Cpp11

# tab宽度
TabWidth: 4
